
# Verilator specific test bench paths
SCTB_PATH = $(BP_ME_TB_PATH)/tb
BP_ME_TB_COMMON_PATH = $(BP_ME_TB_PATH)/common

## Tools
VV = $(VERILATOR) 
CC = g++

VV_OPTS +=--trace #-O3
#VV_OPTS +=--trace-structs
VV_OPTS +=-Wno-unoptflat # Verilator has problems with false positive combinatorial
                         #   loop detection e.g. bit 0 drives bit 1 of struct

# These flags are passed to the C++ compiler used by Verilator
CPPFLAGS +=-I$(BP_ME_TB_PATH)/include -I$(BP_ME_PATH)/src/include/c

# Verilator specific sources (LINT only)
SCTB_SOURCE = \
	$(BP_ME_TB_COMMON_PATH)/bp_mem.v
#	$(BP_ME_TB_COMMON_PATH)/bp_me_top.v \

SC_TOP_MODULE = bp_me_top

## Export variables to subcommands
export

## Targets
clean.sc: clean
	$(shell find $(SCTB_PATH) -regex '.*\(simsc\|simout\.txt\|dump\.vcd\)' | xargs rm -f)

lint.sc:
	$(eval HDL_SOURCE += $(BP_ME_PATH)/src/v/roms/demo-v2/bp_cce_inst_rom_demo-v2_lce1_wg16_assoc8.v)
	$(VV) $(VV_OPTS) --lint-only $(HDL_SOURCE) $(SCTB_SOURCE) --top-module $(SC_TOP_MODULE)

# Makefile.frag is allowed to set TOP_MODULE, which allows multiple tests to target the same
# top module. If Makefile.frag does not set TOP_MODULE, it defaults to the target stem
%.build.sc: clean
	$(eval include $(SCTB_PATH)/$*/Makefile.frag)
	$(eval TOP_MODULE ?= $*)
	$(VV) $(VV_OPTS) --Wno-fatal --top-module $(TOP_MODULE) --sc -f flist.verilator $(HDL_PARAMS) \
		--exe $(SCTB_PATH)/$*/test_bp.cpp -f $(SCTB_PATH)/$*/flist.verilator \
	&& make -C obj_dir -f V$(TOP_MODULE).mk \
	&& cp obj_dir/V$(TOP_MODULE) $(SCTB_PATH)/$*/simsc

%.run.sc: %.build.sc
	$(eval include $(SCTB_PATH)/$*/Makefile.frag) \
	cd $(SCTB_PATH)/$* \
	&& ./simsc $(HDL_PARAMS) | tee $(SCTB_PATH)/$*/simout.txt
